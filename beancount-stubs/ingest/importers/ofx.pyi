import enum
from _typeshed import Incomplete
from beancount.core import amount as amount, data as data
from beancount.core.number import D as D
from beancount.ingest import importer as importer
from collections.abc import Generator

class BalanceType(enum.Enum):
    NONE: int
    DECLARED: int
    LAST: int

class Importer(importer.ImporterProtocol):
    acctid_regexp: Incomplete
    account: Incomplete
    basename: Incomplete
    balance_type: Incomplete
    def __init__(self, acctid_regexp, account, basename: Incomplete | None = ..., balance_type=...) -> None: ...
    def name(self): ...
    def identify(self, file): ...
    def file_account(self, _): ...
    def file_name(self, file): ...
    def file_date(self, file): ...
    def extract(self, file, existing_entries: Incomplete | None = ...): ...

def extract(soup, filename, acctid_regexp, account, flag, balance_type): ...
def parse_ofx_time(date_str): ...
def find_acctids(contents) -> Generator[Incomplete, None, None]: ...
def find_max_date(contents): ...
def find_currency(soup): ...
def find_statement_transactions(soup) -> Generator[Incomplete, None, None]: ...
def find_child(node, name, conversion: Incomplete | None = ...): ...
def build_transaction(stmttrn, flag, account, currency): ...
